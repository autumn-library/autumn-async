#Использовать autumn
#Использовать autumn-logos
#Использовать asserts
#Использовать "."
#Использовать ".."

&Тест
Процедура АсинхронныеМетодыРаботаютАсинхронно() Экспорт

    // Дано
	Поделка = Новый Поделка();
	Поделка
		.ДобавитьЖелудь(Тип("АсинхронныйЖелудь"))
		.ДобавитьЖелудь(Тип("ПользовательскийОбработчикНеПерехваченныхАсинхронныхИсключений"))
		.ЗапуститьПриложение();

	Желудь = Поделка.НайтиЖелудь("АсинхронныйЖелудь");

	// Когда
	Желудь.УстановитьЗначениеАсинхронно(100);

	// Тогда
	Ожидаем.Что(Желудь.ПолучитьЗначение(), "Значение не изменится синхронно").Равно(123);

	// Время паузы в фоновом задании + дополнительная задержка.
	Приостановить(500 + 200);

	// Тогда
	Ожидаем.Что(Желудь.ПолучитьЗначение()).Равно(100);

КонецПроцедуры

&Тест
Процедура АсинхронныеМетодыВозвращаютОбещание() Экспорт

	// Дано
	Поделка = Новый Поделка();
	Поделка
		.ДобавитьЖелудь(Тип("АсинхронныйЖелудь"))
		.ДобавитьЖелудь(Тип("ПользовательскийОбработчикНеПерехваченныхАсинхронныхИсключений"))
		.ЗапуститьПриложение();

	Желудь = Поделка.НайтиЖелудь("АсинхронныйЖелудь");

	// Когда
	Результат = Желудь.ВозвращаетСамСебя();

	// Тогда
	Ожидаем.Что(Результат, "Асинхронный метод вернул обещание").ИмеетТип("Обещание");

КонецПроцедуры

&Тест
Процедура ПользовательскиеОбработчикиНеПерехваченныхИсключенийРаботают() Экспорт

    // Дано
	Поделка = Новый Поделка();
	Поделка
		.ДобавитьЖелудь(Тип("АсинхронныйЖелудь"))
		.ДобавитьЖелудь(Тип("ПользовательскийОбработчикНеПерехваченныхАсинхронныхИсключений"))
		.ЗапуститьПриложение();

	Желудь = Поделка.НайтиЖелудь("АсинхронныйЖелудь");
	Обработчик = Поделка.НайтиЖелудь("ПользовательскийОбработчикНеПерехваченныхАсинхронныхИсключений");

	// Когда
	Желудь.УстановитьЗначениеАсинхронноСОшибкой(100);

	Приостановить(100);

	// Тогда
	Ожидаем.Что(Обработчик.Инфо.Описание)
		.Содержит("Я ошибка");

КонецПроцедуры
