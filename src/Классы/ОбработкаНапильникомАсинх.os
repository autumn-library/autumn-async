#Использовать decorator
#Использовать autumn

Перем _Поделка;

Функция ОбработатьЖелудь(Желудь, ОпределениеЖелудя) Экспорт

	Методы = ОпределениеЖелудя.НайтиМетодыСАннотациями("Асинх");

	Если Методы.Количество() = 0 Тогда
		Возврат Желудь;
	КонецЕсли;

	ИмяОбработчикаНеПерехваченныхИсключений = "СтандартныйОбработчикНеПерехваченныхАсинхронныхИсключений";

	Завязь = ОпределениеЖелудя.Завязь();

	Если Завязь.ЭтоКонструктор() Тогда

		Аннотация = РаботаСАннотациями.ПолучитьАннотацию(Завязь.ДанныеМетода(), "Асинх");

		Если Аннотация <> Неопределено Тогда

			ИмяОбработчикаНеПерехваченныхИсключений = РаботаСАннотациями.ПолучитьЗначениеПараметраАннотации(
				Аннотация,,
				ИмяОбработчикаНеПерехваченныхИсключений
			);

		КонецЕсли;

	КонецЕсли;

	ПостроительДекоратора = Новый ПостроительДекоратора(Желудь)
		.Поле(Новый Поле("НапильникАсинх_ОбработчикИсключений")
			.ЗначениеПоУмолчанию(
				_Поделка.НайтиЖелудь(ИмяОбработчикаНеПерехваченныхИсключений)
			))
		.Поле(Новый Поле("НапильникАсинх_Рефлектор").ЗначениеПоУмолчанию(Новый Рефлектор()))
		.Импорт(Новый Импорт("async"));

	Параметр_ИмяМетода = Новый ПараметрМетода("НапильникАсинх_ИмяМетода");
	Параметр_ПараметрыМетода = Новый ПараметрМетода("НапильникАсинх_ПараметрыМетода");

	ТелоСлужебногоМетода = 
	"НапильникАсинх_Результат = НапильникАсинх_Рефлектор.ВызватьМетод(
	|	Декоратор_ИсходныйОбъект,
	|	НапильникАсинх_ИмяМетода,
	|	НапильникАсинх_ПараметрыМетода
	|);
	|
	|ОбработкаДекоратора.СинхронизироватьПоля(Декоратор_ИсходныйОбъект, ЭтотОбъект);
	|
	|Возврат НапильникАсинх_Результат;
	|";

	СлужебныйМетод = Новый Метод("НапильникАсинх_Служебный")
		.Публичный()
		.Параметр(Параметр_ИмяМетода)
		.Параметр(Параметр_ПараметрыМетода)
		.ТелоМетода(ТелоСлужебногоМетода);

	ПостроительДекоратора.Метод(СлужебныйМетод);

	ШаблонТелаПерехватчика = 
	"НапильникАсинх_ПараметрыМетода = Новый Массив;
	|НапильникАсинх_ПараметрыМетода.Добавить(""%1"");
	|
	|НапильникАсинх_ЗначенияПараметровМетода = Новый Массив;
	|%2
	|
	|НапильникАсинх_ПараметрыМетода.Добавить(НапильникАсинх_ЗначенияПараметровМетода);
	|
	|Обещание = Обещания.ВыполнитьДелегат(Новый Действие(ЭтотОбъект, ""НапильникАсинх_Служебный""), НапильникАсинх_ПараметрыМетода);
	|
	|Если %3 Тогда
	|	АсинхСлужебный.ОбработкаИсключенийАсинхронныхПроцедур(
	|		Обещание,
	|		НапильникАсинх_ОбработчикИсключений,
	|		""%1"",
	|		НапильникАсинх_ЗначенияПараметровМетода
	|	);
	|КонецЕсли;
	|
	|Возврат %4;
	|";

	ШаблонПараметрМетода = "НапильникАсинх_ЗначенияПараметровМетода.Добавить(%1);";

	Для Каждого Метод Из Методы Цикл

		ПараметрыМетода = Новый Массив;
		Для Каждого Параметр Из Метод.Параметры Цикл
			ПараметрыМетода.Добавить(СтрШаблон(ШаблонПараметрМетода, Параметр.Имя));
		КонецЦикла;

		ТелоПерехватчика = СтрШаблон(
			ШаблонТелаПерехватчика,
			Метод.Имя,
			СтрСоединить(ПараметрыМетода, Символы.ПС),
			Формат(Не Метод.ЭтоФункция, "БЛ=Ложь; БИ=Истина"),
			?(Метод.ЭтоФункция, "Обещание", "")
		);

		Перехватчик = Новый Перехватчик(Метод.Имя)
			.ТипПерехватчика(ТипыПерехватчиковМетода.Перед)
			.Тело(ТелоПерехватчика);

		ПостроительДекоратора.Перехватчик(Перехватчик);

	КонецЦикла;

	Возврат ПостроительДекоратора.Отладка().Построить();

КонецФункции

&Напильник
Процедура ПриСозданииОбъекта(&Пластилин Поделка)
	_Поделка = Поделка;
КонецПроцедуры
